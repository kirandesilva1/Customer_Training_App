/*
 * Customer API
 *
 * This is sample customer api
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using System.Net;
using IO.Swagger.Attributes;
using IO.Swagger.BusinessLayer;
//using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using IO.Swagger.Services;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class OrderApiController : ControllerBase
    { 
        
        private readonly IOrderService _orderService;
        private OrderManager _orderManager; 

        public OrderApiController(IOrderService orderService)
        {
            _orderService = orderService;
            _orderManager = new OrderManager(_orderService);
        }
        
        /// <summary>
        /// Create Order
        /// </summary>
        /// <remarks>This is used to create an order</remarks>
        /// <param name="body">Created order object</param>
        /// <response code="0">successful operation</response>
        [HttpPost]
        [Route("/v1/order")]
        [ValidateModelState]
        [SwaggerOperation("CreateOrder")]
        public virtual IActionResult CreateOrder([FromBody]Order body)
        { 
            try
            {
                Guid id = _orderService.CreateOrder(body);
                return StatusCode(200,id.ToString());
            }
            catch (Exception ex)
            {
                return StatusCode(400);
            }
        }

        /// <summary>
        ///  Cancel order
        /// </summary>
        
        /// <param name="orderId">Order id to Cancel</param>
        /// <response code="400">Invalid Order id supplied</response>
        /// <response code="404">Order not found</response>
        [HttpDelete]
        [Route("/v1/order")]
        [ValidateModelState]
        [SwaggerOperation("CancelOrder")]
        public virtual IActionResult CancelOrder([FromRoute][Required]string orderId)
        {
            int _statusCode = 0;
            // Get Order
            Order order = _orderService.GetOrder(orderId);

            if (order != null)
            {
                // Check status of order
                // If its shipped or received can't cancel
                if (order.Status == Status.Active)
                {
                    order.Status = Status.Cancelled;
                    _orderService.CancelOrder(order);
                    _statusCode = 200;
                }
            }
            else
            {
                _statusCode = 400;
            }
            return StatusCode(_statusCode);
        }

        /// <summary>
        /// Get customer Orders
        /// </summary>
        /// <remarks>This is used to get a customers orders</remarks>
        /// <param name="customerid">The customer orders that needs to be fetched.</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid customer id supplied</response>
        /// <response code="404">Customer orders not found</response>
        [HttpGet]
        [Route("/v1/customerorders/{customerid}")]
        [ValidateModelState]
        [SwaggerOperation("GetCustomerOrders")]
        [SwaggerResponse(statusCode: 200, type: typeof(Order), description: "successful operation")]
        public virtual IActionResult GetCustomerOrders([FromRoute][Required]string customerid)
        { 
            //e88b7009-6419-40f4-a3d0-808e4ae2e8b2
            try
            {
                IEnumerable<Order> order = _orderService.GetCustomerOrders(customerid);
                return StatusCode(200,order);
            }
            catch (Exception ex)
            {
                return StatusCode(400);
            }
        }

        /// <summary>
        /// Update existing order
        /// </summary>
        
        /// <param name="body">Order object that needs to be added</param>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="404">Order not found</response>
        /// <response code="405">Validation exception</response>
        [HttpPut]
        [Route("/v1/order")]
        [ValidateModelState]
        [SwaggerOperation("UpdateOrder")]
        public virtual IActionResult UpdateOrder([FromBody]Order body)
        { 
            Order order = _orderService.GetOrder(body.OrderId);
            if (order != null)
            {
                _orderService.UpdateOrder(body);
                return StatusCode(200);
            }
            else
            {
                return StatusCode(404);
            }
        }

        /// <summary>
        /// Get Orders 
        /// </summary>

        /// <response code="404">Orders not found</response>
        /// <response code="405">Validation exception</response>
        [HttpGet]
        [Route("/v1/orders")]
        [SwaggerOperation("GetOrders")]
        [SwaggerResponse(statusCode: 200, type: typeof(IEnumerable<Order>), description: "successful operation")]
        public virtual IActionResult GetOrders()
        {
            (HttpStatusCode statusCode , IEnumerable<Order> orders)= _orderManager.GetOrders();
            return StatusCode((int)statusCode, orders);
        }


        /// <summary>
        ///  Get Order
        /// </summary>
        /// <param name="orderid"></param>
        /// <returns></returns>
        [HttpGet]
        [Route("/v1/order/{orderid}")]
        [SwaggerOperation("GetOrder")]
        [SwaggerResponse(statusCode: 200, type: typeof(Order), description: "successful operation")]
        public virtual IActionResult GetOrder([FromRoute] [Required] string orderid)
        {
            (HttpStatusCode statusCode , Order order) = _orderManager.GetOrder(orderid);
            return StatusCode((int)statusCode, order);
            
        }

        /// <summary>
        /// Ship Order
        /// </summary>
        [HttpPost]
        [Route("/v1/shiporder")]
        [SwaggerOperation("ShipOrder")]
        public virtual IActionResult ShipOrder([FromBody]string body)
        {
            
            (HttpStatusCode statusCode , string message) = _orderManager.ShipOrder(body);
            return StatusCode((int)statusCode, message);
        }
    }
}
