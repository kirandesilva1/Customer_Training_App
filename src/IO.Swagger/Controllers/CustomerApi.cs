/*
 * Customer API
 *
 * This is sample customer api
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Net;
using IO.Swagger.Attributes;
using IO.Swagger.BusinessLayer;
//using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using IO.Swagger.Services;
using Microsoft.AspNetCore.Cors;
using Microsoft.AspNetCore.Http;

namespace IO.Swagger.Controllers
{
    // STATUS CODES IN CONTROLLER NOT IN BUSINESS LOGIC LAYERS
    
    
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CustomerApiController : ControllerBase
    {
        private readonly ICustomerService _customerService;
        private readonly IOrderService _orderService;
        private CustomerManager customerManager; 

        public CustomerApiController(ICustomerService customerService, IOrderService orderService)
        {
            _customerService = customerService;
            _orderService = orderService;
            customerManager = new CustomerManager(_customerService, _orderService);
            
        }

        /// <summary>
        /// Create customer
        /// </summary>
        /// <remarks>This is used to create a customer</remarks>
        /// <param name="body">Created customer object</param>
        /// <response code="0">successful operation</response>
        [HttpPost]
        [Route("/v1/customer")]
        [ValidateModelState]
        [SwaggerOperation("CreateCustomer")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "successful operation")]
        public virtual IActionResult CreateCustomer([FromBody] Customer body)
        {
            try
            {
                var id = customerManager.CreateCustomerProfile(body);
                return Ok(id.ToString());
            }
            catch (Exception ex)
            {
                return BadRequest("Customer creation failed!");
            }
        }

        /// <summary>
        /// Deletes a customer
        /// </summary>
        /// <param name="customerId">Customer id to delete</param>
        /// <response code="400">Customer cannot be delete it has order(s) connected to it
        /// </response>
        /// <response code="404">Customer not found</response>
        [HttpDelete]
        [Route("/v1/customer/{customerid}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteCustomer")]
        public virtual IActionResult DeleteCustomer([FromRoute] [Required] string customerId)
        {
           bool result =  customerManager.DeleteCustomer(customerId);

           if (!result)
           {
               return BadRequest("Customer not deleted!");
           }
           else
           {
               return Ok();
           }
           
        }

        /// <summary>
        /// Get Customer info
        /// </summary>
        /// <param name="customerid">The customerid that needs to be fetched.</param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid customer id supplied</response>
        /// <response code="404">Customer not found</response>
        [HttpGet]
        [Route("/v1/customer/{customerid}")]
        [ValidateModelState]
        [SwaggerOperation("GetCustomerInfo")]
        [SwaggerResponse(statusCode: 200, type: typeof(Customer), description: "successful operation")]
        public virtual IActionResult GetCustomerInfo([FromRoute] [Required] string customerid)
        {
            Customer customer = customerManager.GetCustomerProfile(customerid);
            
            if (customer == null)
                return BadRequest("Customer with Id " + customerid + " does not exist");
            
            return Ok(customer);
        }


        /// <summary>
        /// Get 
        /// </summary>
        /// <remarks>This is used to get all available customers</remarks>
        /// <response code="200">successful operation</response>
        [EnableCors("ApiCorsPolicy")] 
        [HttpGet]
        [Route("/v1/customer")]
        [SwaggerOperation("GetCustomers")]
        [SwaggerResponse(statusCode: 200, type: typeof(IEnumerable<Customer>), description: "successful operation")]
        public virtual IActionResult GetCustomers()
        {
            IEnumerable<Customer> customers = customerManager.GetCustomers(); 
            return Ok(customers);
        }

        /// <summary>
        /// Update existing customer
        /// </summary>
        /// <param name="body">Customer object that needs to be added</param>
        [HttpPut]
        [Route("/v1/customer")]
        [ValidateModelState]
        [SwaggerOperation("UpdateCustomer")]
        public virtual IActionResult UpdateCustomer([FromBody] Customer body)
        {
            Customer customer = _customerService.GetCustomerInfo(body.Id.ToString());
            
            if (customer != null)
            {
                _customerService.UpdateCustomer(body);
                return Ok();
            }
            else
            {
                return BadRequest("Update for customer " + body.Name + " Failed! Customer does not exist.");
            }
        }
    }
}